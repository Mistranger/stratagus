
/* $Id$ */

- add a callback for cases when the map is changed so that region information
  can be updated accordingly.
- cost of short paths is too big (most probably because of the memset() in
  LowlevelReset()).
- add finding a substitute goal as done in pf_highlevel.c
- solve cases where the goal itself is reachable but there's no path to it
  (islands etc.) - probably by using region groups and by deciding (by both
  region groups sizes?) whether it's better to try to find a substitute for
  the real goal *or* to let the highlevel pathfinder do an exhaustive search
  through the source region group and pick the region with best h.
- add a data structure for ordered highlevel path from which exact sequence
  of the regions along the highlevel path would be clear
- use this for solving the case when highlevel path is found but lowlevel path
  is blocked by a unit - detect the last reachable region along the highlevel
  path, disconnect this region and the next one temporarily and repeat
  highlevel pathfinding?
- experiment with erasing already visited regions from highlevel path to
  prevent unnecessary expanding nodes near the beginning of the path long
  behind the cutting edge.
- experiment with computing extremely long paths by computing highlevel path
  once (storing it) and repeatedly running lowlevel pathfinder just to fill
  up the unit's stored path buffer - regions used by the just computed and
  stored path would be erased from the highlevel path so that they are not
  used again.
- experiment with heuristics (weight, type of function) to see how it
  influences the number of iterations and numbers of revocations from Open
  and Closed sets and how much is the resulting path ugly or even suboptimal.
- experiment with path beautifying (either by assigning greater cost to
  diagonal moves or somehow during traceback).
